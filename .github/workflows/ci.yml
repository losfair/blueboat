name: build
on:
- push

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - name: Rust Build Cache
        uses: Swatinem/rust-cache@v1
        with:
          key: cfg-v2
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: "ghcr.io"
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install system dependencies
        run: sudo apt install -y libseccomp-dev cmake
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ghcr.io/${{ github.repository }}
      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install pnpm
        uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.18.0
      - name: Install mold
        run: |
          curl -sSL -o mold.tar.gz https://github.com/rui314/mold/releases/download/v1.1.1/mold-1.1.1-x86_64-linux.tar.gz
          gzip -d < mold.tar.gz | tar x
          sudo cp ./mold-1.1.1-x86_64-linux/bin/mold /usr/local/bin/
      - name: Install cargo-deb
        run: cargo install cargo-deb
      - name: Install jsland deps
        run: cd jsland && pnpm i
      - name: Build mimalloc
        run: |
          set -e
          git clone https://github.com/microsoft/mimalloc
          cd mimalloc
          git checkout v1.7.3
          mkdir -p out/release
          cd out/release
          cmake ../..
          make -j8
          cd ../../..
          cp ./mimalloc/out/release/libmimalloc.so.1.7 ./docker/libmimalloc.so
      - name: Build
        run: |
          set -e
          cp ./.cargo-ci/config ./.cargo/config
          BLUEBOAT_DEB=1 ./build.sh
          deb_file="$(find ./target/debian/ -type f)"
          cp ${deb_file} ./docker/blueboat.deb
          ls -lash ./docker
      - name: Build Docker image for testing
        uses: docker/build-push-action@v2
        with:
          context: ./docker
          load: true
          tags: losfair/blueboat:test
      - name: Smoke test
        run: |
          set -e
          mkdir test-workspace
          cd test-workspace
          wget https://dl.min.io/server/minio/release/linux-amd64/minio
          chmod +x minio
          mkdir test-data
          ./minio server --address 0.0.0.0:1932 ./test-data/minio &
          docker run --rm -p 127.0.0.1:3000:3000 --name blueboat --entrypoint /usr/bin/blueboat_server \
            -e AWS_ACCESS_KEY_ID="minioadmin" \
            -e AWS_SECRET_ACCESS_KEY="minioadmin" \
            -e RUST_LOG=info \
            losfair/blueboat:test \
            -l "0.0.0.0:3000" \
            --s3-bucket "apps" --s3-region "us-east-1" \
            --s3-endpoint "http://172.17.0.1:1932" &
          sleep 5
          mkdir -p ./test-data/minio/apps/hello
          echo 'Router.get("/", () => new Response("Hello from blueboat"))' | sudo tee ./index.js
          tar -cvf ./test-data/minio/apps/hello/1.tar ./index.js
          echo '{"version":"1","package":"hello/1.tar","env":{}}' | tee ./test-data/minio/apps/hello/metadata.json
          curl -H "X-Blueboat-Metadata: hello/metadata.json" http://localhost:3000 | grep "Hello from blueboat"
      - name: Build Docker image for release
        uses: docker/build-push-action@v2
        with:
          context: ./docker
          push: ${{ startsWith(github.ref, 'refs/tags/') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  unit-test:
    name: Unit test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - name: Rust Build Cache
        uses: Swatinem/rust-cache@v1
      - name: Install system dependencies
        run: sudo apt install -y libseccomp-dev cmake
      - name: Install mold
        run: |
          curl -sSL -o mold.tar.gz https://github.com/rui314/mold/releases/download/v1.1.1/mold-1.1.1-x86_64-linux.tar.gz
          gzip -d < mold.tar.gz | tar x
          sudo cp ./mold-1.1.1-x86_64-linux/bin/mold /usr/local/bin/
      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install pnpm
        uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.18.0
      - name: Install jsland deps
        run: cd jsland && pnpm i
      - name: Prebuild and test
        run: |
          set -e
          cp ./.cargo-ci/config ./.cargo/config
          SKIP_FINAL_BUILD=1 ./build.sh
          cargo test --release --lib
